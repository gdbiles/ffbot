# Module for interacting with Yahoo Fantasy Sports API
#
# May build out functionality for dealing with authorizing
# app on Yahoo dev, as this process was not straightforward.
#
# Before using this module, user must have
#  1. Created app with Yahoo Dev
#  2. Registered app with properties defined in README
#  3. Filled out auth.json

import json
import logging
import oauthlib
import os
import requests_oauthlib
import webbrowser


logger = logging.getLogger(__name__)
AUTHFILE = os.path.realpath('../auth.json')


def load_auth(t=None):
    with open(AUTHFILE, 'r') as f:
        auth = json.load(f)
    if not t:
        return auth
    auth = auth[t]
    errmsg = 'Missing fields in auth.json: %s!' % t
    assert all(v for v in auth.values()), errmsg
    return auth


class YahooAPIBase(requests_oauthlib.OAuth2Session):
    """
    Root API object
    This will allow us to interact with Yahoo's OAuth2-enabled web API
    and seamlessly update tokens via requests_oauth2lib.
    """
    token_url = 'https://api.login.yahoo.com/oauth2/get_token'

    def __init__(self):
        # Load auth config into class
        self.logger = logger
        self.auth_cfg = load_auth('yahoo')

        # Define base class requirements
        auth = (self.auth_cfg['client_id'], self.auth_cfg['client_secret'])
        refresh_kwargs = {
            'redirect_uri': 'oob',
            'grant_type': 'refresh_token',
        }

        # Do super because its good
        super(YahooAPIBase, self).__init__(
            client_id=self.auth_cfg['client_id'],
            auto_refresh_url=YahooAPIBase.token_url,
            redirect_uri='oob',
            auto_refresh_kwargs=refresh_kwargs,
        )

        # Fetch initial token (refresh handled automatically)
        try:
            self.fetch_token(YahooAPIBase.token_url,
                             code=self.auth_cfg['code'],
                             auth=auth
                             )
        except Exception as e:
            if not (isinstance(e, oauthlib.oauth2.InvalidGrantError)
                    or 'INVALID_AUTHORIZATION_CODE' in str(e)):
                raise
            self.generate_new_auth_code()
            self.__init__()

    def generate_new_auth_code(self):
        """
        In case auth code has expired, generate a new one, and stick
        it in our auth.json file
        NOTE: Requires browser access

        :return:
        """
        self.logger.info('Auth code has expired... generating link to renew')
        url = 'https://api.login.yahoo.com/oauth2/request_auth?'\
              'client_id=%s&redirect_uri=oob&response_type=code' % self.auth_cfg['client_id']
        self.logger.info(url)
        webbrowser.open(url)
        code = input('Enter the code generated by popup: ')
        self.logger.info('Writing new code to auth.json')
        auth = load_auth()
        with open(AUTHFILE, 'w') as f:
            auth['yahoo']['code'] = code
            json.dump(auth, f)
        self.logger.info('Authfile updated. Renewing %s' % __class__.__name__)


class Resource(object):
    """
    Resource base class.

    Queries return XML. This will subclass itself into one of the fantasy league
    component classes, convert XML to json structure, and expose json as class
    attributes.
    """
    pass

class League(Resource):
    pass

class Matchup(Resource):
    pass

class Manager(Resource):
    pass